{"ast":null,"code":"import { logout, login } from \"../components/api/api\";\nimport { stopSubmit } from \"redux-form\";\nconst GET_AUTH = 'GET_AUTH';\nconst LOGOUT = 'LOGOUT';\nconst initialState = {\n  id: null,\n  login: '',\n  email: '',\n  isAuth: false\n};\n\nconst authReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_AUTH:\n      return { ...state,\n        ...action.authInfo,\n        isAuth: true\n      };\n\n    case LOGOUT:\n      return { ...state,\n        isAuth: false,\n        id: null,\n        login: '',\n        email: ''\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const getAuth = authInfo => ({\n  type: GET_AUTH,\n  authInfo\n});\n\nconst logoutAC = () => ({\n  type: LOGOUT\n});\n\nexport const logoutThunk = () => dispatch => {\n  logout().then(response => {\n    if (response.data.resultCode === 0) dispatch(logoutAC());\n  });\n};\nexport const loginThunk = (email, password, rememberMe) => dispatch => {\n  login(email, password, rememberMe).then(response => {\n    if (response.data.resultCode === 0) dispatch(getAuth({\n      email,\n      id: response.data.data.userId\n    }));else {\n      debugger;\n      let message = response.data.messages.length > 0 ? response.data.massages[0] : \"some error\";\n      dispatch(stopSubmit(\"login\", {\n        email: message\n      }));\n    }\n  });\n};\nexport default authReducer;","map":{"version":3,"sources":["/Users/a000/Desktop/react-soc-2/my-react-app/src/redux/auth-reducer.js"],"names":["logout","login","stopSubmit","GET_AUTH","LOGOUT","initialState","id","email","isAuth","authReducer","state","action","type","authInfo","getAuth","logoutAC","logoutThunk","dispatch","then","response","data","resultCode","loginThunk","password","rememberMe","userId","message","messages","length","massages"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,KAAjB,QAA8B,uBAA9B;AACA,SAASC,UAAT,QAA2B,YAA3B;AAEA,MAAMC,QAAQ,GAAG,UAAjB;AACA,MAAMC,MAAM,GAAG,QAAf;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,EAAE,EAAE,IADa;AAEjBL,EAAAA,KAAK,EAAE,EAFU;AAGjBM,EAAAA,KAAK,EAAE,EAHU;AAIjBC,EAAAA,MAAM,EAAE;AAJS,CAArB;;AAOA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGL,YAAT,EAAuBM,MAAvB,KAAkC;AAElD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKT,QAAL;AACI,aAAO,EAAE,GAAGO,KAAL;AAAY,WAAGC,MAAM,CAACE,QAAtB;AAAgCL,QAAAA,MAAM,EAAE;AAAxC,OAAP;;AACJ,SAAKJ,MAAL;AACI,aAAO,EAAE,GAAGM,KAAL;AAAYF,QAAAA,MAAM,EAAE,KAApB;AAA2BF,QAAAA,EAAE,EAAE,IAA/B;AAAqCL,QAAAA,KAAK,EAAE,EAA5C;AAAgDM,QAAAA,KAAK,EAAE;AAAvD,OAAP;;AACJ;AAAS,aAAOG,KAAP;AALb;AAOH,CATD;;AAWA,OAAO,MAAMI,OAAO,GAAID,QAAD,KAAe;AAClCD,EAAAA,IAAI,EAAET,QAD4B;AAElCU,EAAAA;AAFkC,CAAf,CAAhB;;AAKP,MAAME,QAAQ,GAAG,OAAO;AACpBH,EAAAA,IAAI,EAAER;AADc,CAAP,CAAjB;;AAIA,OAAO,MAAMY,WAAW,GAAG,MAAOC,QAAD,IAAc;AAC3CjB,EAAAA,MAAM,GAAGkB,IAAT,CAAcC,QAAQ,IAAI;AACtB,QAAIA,QAAQ,CAACC,IAAT,CAAcC,UAAd,KAA6B,CAAjC,EAAoCJ,QAAQ,CAACF,QAAQ,EAAT,CAAR;AACvC,GAFD;AAGH,CAJM;AAMP,OAAO,MAAMO,UAAU,GAAG,CAACf,KAAD,EAAQgB,QAAR,EAAkBC,UAAlB,KAAkCP,QAAD,IAAc;AAGrEhB,EAAAA,KAAK,CAACM,KAAD,EAAQgB,QAAR,EAAkBC,UAAlB,CAAL,CAAmCN,IAAnC,CAAwCC,QAAQ,IAAI;AAChD,QAAIA,QAAQ,CAACC,IAAT,CAAcC,UAAd,KAA6B,CAAjC,EAAoCJ,QAAQ,CAACH,OAAO,CAAC;AAAEP,MAAAA,KAAF;AAASD,MAAAA,EAAE,EAAEa,QAAQ,CAACC,IAAT,CAAcA,IAAd,CAAmBK;AAAhC,KAAD,CAAR,CAAR,CAApC,KACK;AACD;AACA,UAAIC,OAAO,GAAGP,QAAQ,CAACC,IAAT,CAAcO,QAAd,CAAuBC,MAAvB,GAAgC,CAAhC,GAAoCT,QAAQ,CAACC,IAAT,CAAcS,QAAd,CAAuB,CAAvB,CAApC,GAAgE,YAA9E;AACAZ,MAAAA,QAAQ,CAACf,UAAU,CAAC,OAAD,EAAU;AAAEK,QAAAA,KAAK,EAAEmB;AAAT,OAAV,CAAX,CAAR;AACH;AACJ,GAPD;AAQH,CAXM;AAaP,eAAejB,WAAf","sourcesContent":["import { logout, login } from \"../components/api/api\"\nimport { stopSubmit } from \"redux-form\"\n\nconst GET_AUTH = 'GET_AUTH'\nconst LOGOUT = 'LOGOUT'\n\nconst initialState = {\n    id: null,\n    login: '',\n    email: '',\n    isAuth: false\n}\n\nconst authReducer = (state = initialState, action) => {\n\n    switch (action.type) {\n        case GET_AUTH:\n            return { ...state, ...action.authInfo, isAuth: true }\n        case LOGOUT:\n            return { ...state, isAuth: false, id: null, login: '', email: '' }\n        default: return state\n    }\n}\n\nexport const getAuth = (authInfo) => ({\n    type: GET_AUTH,\n    authInfo\n})\n\nconst logoutAC = () => ({\n    type: LOGOUT\n})\n\nexport const logoutThunk = () => (dispatch) => {\n    logout().then(response => {\n        if (response.data.resultCode === 0) dispatch(logoutAC())\n    })\n}\n\nexport const loginThunk = (email, password, rememberMe) => (dispatch) => {\n\n  \n    login(email, password, rememberMe).then(response => {\n        if (response.data.resultCode === 0) dispatch(getAuth({ email, id: response.data.data.userId }))\n        else {\n            debugger\n            let message = response.data.messages.length > 0 ? response.data.massages[0] : \"some error\"\n            dispatch(stopSubmit(\"login\", { email: message }))\n        }\n    })\n}\n\nexport default authReducer"]},"metadata":{},"sourceType":"module"}