{"ast":null,"code":"import { getProfile, getProfileStatus, setProfileStatus } from \"../components/api/api\";\nconst GET_PROFILE = 'GET_PROFILE';\nconst LOAD = 'LOAD';\nconst SET_STATUS = 'SET_STATUS';\nconst SET_POST = 'SET_POST';\nconst initialState = {\n  profileInfo: null,\n  isLoaded: false,\n  status: '',\n  posts: []\n};\n\nconst profileReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_PROFILE:\n      return { ...state,\n        profileInfo: { ...action.profileInfo\n        }\n      };\n\n    case LOAD:\n      return { ...state,\n        isLoaded: action.isLoaded\n      };\n\n    case SET_STATUS:\n      return { ...state,\n        status: action.status\n      };\n\n    case SET_POST:\n      return { ...state,\n        posts: [...state.posts]\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst setProfile = profileInfo => ({\n  type: GET_PROFILE,\n  profileInfo\n});\n\nconst load = isLoaded => ({\n  type: LOAD,\n  isLoaded\n});\n\nconst setStatus = status => ({\n  type: SET_STATUS,\n  status\n});\n\nexport const setProfileThunk = currentUser => dispatch => {\n  dispatch(load(false));\n  getProfile(currentUser).then(response => {\n    dispatch(load(true));\n    dispatch(setProfile(response.data));\n  });\n};\nexport const getProfileStatusThunk = currentUser => dispatch => {\n  getProfileStatus(currentUser).then(response => {\n    dispatch(setStatus(response.data));\n  });\n};\nexport const setProfileStatusThunk = status => dispatch => {\n  setProfileStatus(status).then(response => {\n    if (response.data.resultCode === 0) {\n      dispatch(setStatus(status));\n    }\n  });\n};\nexport default profileReducer;","map":{"version":3,"sources":["/Users/a000/Desktop/react-soc-2/my-react-app/src/redux/profile-reducer.js"],"names":["getProfile","getProfileStatus","setProfileStatus","GET_PROFILE","LOAD","SET_STATUS","SET_POST","initialState","profileInfo","isLoaded","status","posts","profileReducer","state","action","type","setProfile","load","setStatus","setProfileThunk","currentUser","dispatch","then","response","data","getProfileStatusThunk","setProfileStatusThunk","resultCode"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,gBAArB,EAAuCC,gBAAvC,QAA+D,uBAA/D;AAEA,MAAMC,WAAW,GAAG,aAApB;AACA,MAAMC,IAAI,GAAG,MAAb;AACA,MAAMC,UAAU,GAAG,YAAnB;AACA,MAAMC,QAAQ,GAAG,UAAjB;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,WAAW,EAAE,IADI;AAEjBC,EAAAA,QAAQ,EAAE,KAFO;AAGjBC,EAAAA,MAAM,EAAE,EAHS;AAIjBC,EAAAA,KAAK,EAAE;AAJU,CAArB;;AAOA,MAAMC,cAAc,GAAG,CAACC,KAAK,GAAGN,YAAT,EAAuBO,MAAvB,KAAkC;AACrD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKZ,WAAL;AACI,aAAO,EAAE,GAAGU,KAAL;AAAYL,QAAAA,WAAW,EAAE,EAAE,GAAGM,MAAM,CAACN;AAAZ;AAAzB,OAAP;;AACJ,SAAKJ,IAAL;AACI,aAAO,EAAE,GAAGS,KAAL;AAAYJ,QAAAA,QAAQ,EAAEK,MAAM,CAACL;AAA7B,OAAP;;AACJ,SAAKJ,UAAL;AACI,aAAO,EAAE,GAAGQ,KAAL;AAAYH,QAAAA,MAAM,EAAEI,MAAM,CAACJ;AAA3B,OAAP;;AACJ,SAAKJ,QAAL;AACI,aAAO,EAAC,GAAGO,KAAJ;AAAWF,QAAAA,KAAK,EAAE,CAAC,GAAGE,KAAK,CAACF,KAAV;AAAlB,OAAP;;AACJ;AAAS,aAAOE,KAAP;AATb;AAWH,CAZD;;AAcA,MAAMG,UAAU,GAAIR,WAAD,KAAkB;AACjCO,EAAAA,IAAI,EAAEZ,WAD2B;AAEjCK,EAAAA;AAFiC,CAAlB,CAAnB;;AAIA,MAAMS,IAAI,GAAIR,QAAD,KAAe;AACxBM,EAAAA,IAAI,EAAEX,IADkB;AAExBK,EAAAA;AAFwB,CAAf,CAAb;;AAIA,MAAMS,SAAS,GAAIR,MAAD,KAAa;AAC3BK,EAAAA,IAAI,EAAEV,UADqB;AAE3BK,EAAAA;AAF2B,CAAb,CAAlB;;AAKA,OAAO,MAAMS,eAAe,GAAIC,WAAD,IAAkBC,QAAD,IAAc;AAC1DA,EAAAA,QAAQ,CAACJ,IAAI,CAAC,KAAD,CAAL,CAAR;AACAjB,EAAAA,UAAU,CAACoB,WAAD,CAAV,CAAwBE,IAAxB,CAA6BC,QAAQ,IAAI;AACrCF,IAAAA,QAAQ,CAACJ,IAAI,CAAC,IAAD,CAAL,CAAR;AACAI,IAAAA,QAAQ,CAACL,UAAU,CAACO,QAAQ,CAACC,IAAV,CAAX,CAAR;AACH,GAHD;AAIH,CANM;AAQP,OAAO,MAAMC,qBAAqB,GAAIL,WAAD,IAAkBC,QAAD,IAAc;AAChEpB,EAAAA,gBAAgB,CAACmB,WAAD,CAAhB,CAA8BE,IAA9B,CAAmCC,QAAQ,IAAI;AAC3CF,IAAAA,QAAQ,CAACH,SAAS,CAACK,QAAQ,CAACC,IAAV,CAAV,CAAR;AACH,GAFD;AAGH,CAJM;AAKP,OAAO,MAAME,qBAAqB,GAAIhB,MAAD,IAAaW,QAAD,IAAc;AAC3DnB,EAAAA,gBAAgB,CAACQ,MAAD,CAAhB,CAAyBY,IAAzB,CAA8BC,QAAQ,IAAI;AACtC,QAAIA,QAAQ,CAACC,IAAT,CAAcG,UAAd,KAA6B,CAAjC,EAAmC;AAC/BN,MAAAA,QAAQ,CAACH,SAAS,CAACR,MAAD,CAAV,CAAR;AACH;AACJ,GAJD;AAMH,CAPM;AASP,eAAeE,cAAf","sourcesContent":["import { getProfile, getProfileStatus, setProfileStatus } from \"../components/api/api\"\n\nconst GET_PROFILE = 'GET_PROFILE'\nconst LOAD = 'LOAD'\nconst SET_STATUS = 'SET_STATUS'\nconst SET_POST = 'SET_POST'\n\nconst initialState = {\n    profileInfo: null,\n    isLoaded: false,\n    status: '',\n    posts: []\n}\n\nconst profileReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case GET_PROFILE:\n            return { ...state, profileInfo: { ...action.profileInfo } }\n        case LOAD:\n            return { ...state, isLoaded: action.isLoaded }\n        case SET_STATUS:\n            return { ...state, status: action.status}\n        case SET_POST: \n            return {...state, posts: [...state.posts, ]}\n        default: return state\n    }\n}\n\nconst setProfile = (profileInfo) => ({\n    type: GET_PROFILE,\n    profileInfo\n})\nconst load = (isLoaded) => ({\n    type: LOAD,\n    isLoaded\n})\nconst setStatus = (status) => ({\n    type: SET_STATUS,\n    status\n})\n\nexport const setProfileThunk = (currentUser) => (dispatch) => {\n    dispatch(load(false))\n    getProfile(currentUser).then(response => {\n        dispatch(load(true))\n        dispatch(setProfile(response.data))\n    })\n}\n\nexport const getProfileStatusThunk = (currentUser) => (dispatch) => {\n    getProfileStatus(currentUser).then(response => {\n        dispatch(setStatus(response.data))\n    })\n}\nexport const setProfileStatusThunk = (status) => (dispatch) => {\n    setProfileStatus(status).then(response => {\n        if (response.data.resultCode === 0){\n            dispatch(setStatus(status))\n        }\n    })\n\n}\n\nexport default profileReducer"]},"metadata":{},"sourceType":"module"}